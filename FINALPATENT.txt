import subprocess
import tempfile
import os
import google.generativeai as genai
from flask import Flask, request, jsonify
from flask_cors import CORS
import time

# Initialize Flask app
app = Flask(__name__)
CORS(app)  # Enable CORS for frontend communication

# Set up Gemini API key
GEMINI_API_KEY = "AIzaSyDfjFFkn6sDzoitb5Gshpa-nbQnb3QuU-A"  # Replace with your actual API key
genai.configure(api_key=GEMINI_API_KEY)

# Route to debug code and generate questions
@app.route('/debug', methods=['POST'])
def debug_code():
    data = request.get_json()
    code = data.get('code')
    language = data.get('language')
    user_input = data.get('user_input', "")

    if not code or not language:
        return jsonify({"error": "Code or language missing"}), 400

    # Execute the code
    output_response = execute_code(code, language, user_input)

    # Generate questions using Gemini
    questions = generate_questions(code)

    return jsonify({
        "output": output_response.get("output", ""),
        "error": output_response.get("error", ""),
        "questions": questions
    })

# Function to execute code based on language
def execute_code(code, language, user_input=""):
    try:
        with tempfile.NamedTemporaryFile(suffix=f'.{language}', delete=False) as temp_file:
            temp_file.write(code.encode())
            temp_file.close()

            print(f"Temporary file created: {temp_file.name}")

            if language == "python":
                result = subprocess.run(['python', temp_file.name], input=user_input, capture_output=True, text=True)
            elif language == "cpp":
                exe_file = temp_file.name.replace('.cpp', '.exe')
                compile_result = subprocess.run(['g++', temp_file.name, '-o', exe_file], capture_output=True, text=True)
                if compile_result.returncode != 0:
                    return {"error": compile_result.stderr}
                result = subprocess.run([exe_file], input=user_input, capture_output=True, text=True)
            elif language == "java":
                class_name = extract_java_class_name(code)
                if not class_name:
                    return {"error": "No public class found in Java code."}
                
                temp_dir = os.path.dirname(temp_file.name)
                java_file_name = f"{temp_dir}/{class_name}.java"
                
                print(f"Java file path: {java_file_name}")

                if os.path.exists(java_file_name):
                    os.remove(java_file_name)
                
                os.rename(temp_file.name, java_file_name)

                if not os.path.exists(java_file_name):
                    return {"error": "Renaming failed"}

                compile_result = subprocess.run(['javac', java_file_name], capture_output=True, text=True)
                if compile_result.returncode != 0:
                    return {"error": compile_result.stderr}

                result = subprocess.run(['java', '-cp', temp_dir, class_name], input=user_input, capture_output=True, text=True)

                if os.path.exists(java_file_name):
                    os.remove(java_file_name)
            elif language == "c":
                exe_file = temp_file.name.replace('.c', '.exe')
                compile_result = subprocess.run(['gcc', temp_file.name, '-o', exe_file], capture_output=True, text=True)
                if compile_result.returncode != 0:
                    return {"error": compile_result.stderr}
                result = subprocess.run([exe_file], input=user_input, capture_output=True, text=True)
            else:
                return {"error": "Unsupported language"}

            os.remove(temp_file.name)
            return {"output": result.stdout if result.returncode == 0 else "", "error": result.stderr if result.returncode != 0 else ""}
    except Exception as e:
        return {"error": str(e)}

# Extract Java class name
def extract_java_class_name(code):
    for line in code.split("\n"):
        if "public class" in line:
            return line.split()[2].strip()
    return None

# Function to generate 5 questions using Gemini API
def generate_questions(code):
    try:
        prompt = f"Analyze the following code and generate 5 conceptual or practical questions:\n\n{code}"
        model = genai.GenerativeModel("gemini-pro")
        response = model.generate_content(prompt)
        return response.text.split("\n")[:5]  # Extract first 5 questions
    except Exception as e:
        return [f"Error generating questions: {str(e)}"]

# Run Flask app
if __name__ == '__main__':
    app.run(debug=True)






<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Code Debugger Tool</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
    <style>
        body {
            font-family: 'Roboto', sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f4f6f9;
            color: #333;
        }

        h2 {
            text-align: center;
            margin: 20px 0;
            color: #444;
        }

        .container {
            display: flex;
            flex-wrap: wrap;
            justify-content: space-between;
            align-items: flex-start;
            gap: 20px;
            padding: 0 20px;
        }

        #debugger, #questions {
            flex: 1;
            min-width: 300px;
            max-width: 48%;
            padding: 20px;
            border: 1px solid #ccc;
            border-radius: 8px;
            background-color: #fff;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        textarea {
            width: 100%;
            height: 200px;
            font-size: 16px;
            padding: 15px;
            border: 1px solid #ccc;
            border-radius: 5px;
            box-sizing: border-box;
            resize: none;
            font-family: 'Courier New', monospace;
            background-color: #f8f8f8;
            transition: border-color 0.3s;
        }

        textarea:focus {
            border-color: #007bff;
            outline: none;
        }

        input, select, button {
            width: 100%;
            margin-top: 10px;
            padding: 15px;
            font-size: 16px;
            cursor: pointer;
            border: 1px solid #ccc;
            border-radius: 5px;
            background-color: #007bff;
            color: #fff;
            transition: background-color 0.3s, border-color 0.3s;
        }

        input:focus, select:focus, button:focus {
            border-color: #0056b3;
            outline: none;
        }

        select:hover, button:hover {
            background-color: #0056b3;
        }

        .success-output {
            color: green;
            background-color: #d4edda;
            border: 1px solid #c3e6cb;
            padding: 15px;
            border-radius: 5px;
            margin-top: 10px;
            white-space: pre-wrap;
        }

        .error-output {
            color: red;
            background-color: #f8d7da;
            border: 1px solid #f5c6cb;
            padding: 15px;
            border-radius: 5px;
            margin-top: 10px;
            white-space: pre-wrap;
        }

        ul {
            padding-left: 20px;
        }

        li {
            margin-bottom: 8px;
        }

        #output {
            margin-top: 20px;
            overflow: auto;
        }

        .spinner {
            margin: 20px auto;
            width: 40px;
            height: 40px;
            border: 5px solid #f3f3f3;
            border-radius: 50%;
            border-top: 5px solid #007bff;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        @media (max-width: 768px) {
            .container {
                flex-direction: column;
                padding: 0 10px;
            }

            #debugger, #questions {
                max-width: 100%;
            }

            textarea {
                height: 150px;
            }
        }
    </style>
</head>
<body>

    <h2>Code Debugger Tool</h2>

    <div class="container">
        <div id="debugger">
            <textarea id="code" placeholder="Enter your code here..." oninput="autoResize(this)"></textarea>
            <select id="language">
                <option value="python">Python</option>
                <option value="cpp">C++</option>
                <option value="java">Java</option>
                <option value="c">C</option>
            </select>
            <input type="text" id="user-input" placeholder="Enter your input here (if applicable)">
            <button onclick="debugCode()">Run Code</button>
            <div id="output"></div>
        </div>

        <div id="questions">
            <strong>Generated Questions:</strong>
            <div class="spinner" id="spinner" style="display: none;"></div>
            <ul id="questions-list"></ul>
        </div>
    </div>

    <script>
        // Auto-resize textarea based on input content
        function autoResize(textarea) {
            textarea.style.height = 'auto';
            textarea.style.height = (textarea.scrollHeight) + 'px';
        }

        async function debugCode() {
            const code = document.getElementById('code').value;
            const language = document.getElementById('language').value;
            const userInput = document.getElementById('user-input').value;
            const outputDiv = document.getElementById('output');
            const questionsDiv = document.getElementById('questions-list');
            const spinner = document.getElementById('spinner');

            outputDiv.innerHTML = "Processing...";
            questionsDiv.innerHTML = "";
            spinner.style.display = 'block';

            // Minimum 2-second loading simulation
            await new Promise(resolve => setTimeout(resolve, 2000));

            const response = await fetch('http://127.0.0.1:5000/debug', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ code, language, user_input: userInput })
            });

            const result = await response.json();

            if (result.output) {
                outputDiv.innerHTML = `<pre class="success-output">${result.output}</pre>`;
            } else if (result.error) {
                outputDiv.innerHTML = `<pre class="error-output">${result.error}</pre>`;
            }

            // Display Generated Questions
            if (result.questions) {
                questionsDiv.innerHTML = result.questions.map(q => `<li>${q}</li>`).join('');
            } else {
                questionsDiv.innerHTML = '<li>No questions generated</li>';
            }

            spinner.style.display = 'none';
        }
    </script>

</body>
</html>
